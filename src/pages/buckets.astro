---
import Navbar from '../components/Navbar.astro';
import BucketsList from '../components/BucketsList.astro';
import BucketGroup from '../components/BucketGroup.astro';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/assets/images/icon128.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Bucket Tabs Management</title>
  </head>
  <body>
    <Navbar />
    <!-- Render the Navbar component -->
    <div class="flex">
      <div class="flex-auto w-64">
        <!-- Render the Main Content component -->
        <BucketsList />
      </div>
    </div>
    <div id="html-templates" hidden="true">
      <BucketGroup id="template-bucket" name="New Bucket" />
  </body>
</html>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
</style>

<script>
  import { initStorage } from '../scripts/internal/storage';

  console.log('Buckets inline script loaded');
  // initStorage();

  const opt_expand_all = document.getElementById('opt-expand-all');
  if (opt_expand_all) {
    opt_expand_all.addEventListener('click', async () => {
      console.log('Option Expand All clicked');

      const buckets = document.getElementById('buckets-list')?.getElementsByClassName('bt-bucket-group');

      if(!buckets)
        return;

      console.log("Buckets: ", buckets.length);
      for (let bucket = 0; bucket < buckets.length; bucket++) {
        const element = buckets[bucket];
        element.getElementsByTagName('input')[0].checked = true;
      }
    });
  }

  const opt_collapse_all = document.getElementById('opt-collapse-all');
  if (opt_collapse_all) {
    opt_collapse_all.addEventListener('click', async () => {
      console.log('Option Collapse All clicked');
      const buckets = document.getElementById('buckets-list')?.getElementsByClassName('bt-bucket-group');

      if(!buckets)
        return;

      console.log("Buckets: ", buckets.length);
      for (let bucket = 0; bucket < buckets.length; bucket++) {
        const element = buckets[bucket];
        element.getElementsByTagName('input')[0].checked = false;
      }
    });
  }

  const opt_export_buckets = document.getElementById('opt-export-buckets');
  if (opt_export_buckets) {
    opt_export_buckets.addEventListener('click', async () => {
      console.log('Option Export Buckets clicked');
    });
  }

  const opt_delete_buckets = document.getElementById('opt-delete-buckets');
  if (opt_delete_buckets) {
    opt_delete_buckets.addEventListener('click', async () => {
      console.log('Option Delete Buckets clicked');
      const bucketList = document.getElementById('buckets-list');
      
      if(!bucketList)
        return;

      const buckets = bucketList.querySelectorAll('li');

      if(!buckets)
        return;

      console.log("Buckets: ", buckets.length);

      Array.prototype.forEach.call(buckets, (li) => {
        bucketList.removeChild(li);
      });
    });
  }

  const opt_add_bucket = document.getElementById('opt-add-bucket');
  if (opt_add_bucket) {
    opt_add_bucket.addEventListener('click', async () => {
      console.log('Option Add Bucket clicked');
      const bucket_template = document.getElementById('template-bucket');

      if(!bucket_template)
        return;

      const bucketList = document.getElementById('buckets-list');

      if(!bucketList)
        return;

      const fragment = document.createDocumentFragment();
      fragment.appendChild(document.createElement('li'));
      let newBucket = bucket_template.cloneNode(true);

      if (newBucket) {
        console.log("Setup Bucket");
        if (fragment.firstChild) {
          const totalBuckets = bucketList.childElementCount + 1;
          fragment.firstChild.appendChild(newBucket);
          let bucket = fragment.firstChild.firstChild;
          (bucket as HTMLElement).removeAttribute('id');
          (bucket as HTMLElement).setAttribute('id', 'bucket-' + totalBuckets);

          const collapseTitle = (bucket as HTMLElement).querySelector('.collapse-title');
          if (collapseTitle) {
            collapseTitle.textContent = 'New Bucket ' + totalBuckets;
          }
        }

        bucketList?.appendChild(fragment);
      }
    });
  }

</script>
