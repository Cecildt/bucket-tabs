---
import Navbar from '../components/Navbar.astro';
import BucketsList from '../components/BucketsList.astro';
import TabItemTemplate from '../components/TabItemTemplate.astro';
import BucketGroupTemplate from '../components/BucketGroupTemplate.astro';
import RenameBucketDialog from '../components/RenameBucketDialog.astro';
import DefaultBucketTemplate from '../components/DefaultBucketTemplate.astro';
import ArchivedBucketTemplate from '../components/ArchivedBucketTemplate.astro';
import GlobalSearchResult from '../components/GlobalSearchResult.astro';
import BucketSearchResultTemplate from '../components/BucketSearchResultTemplate.astro';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/assets/images/icon128.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Bucket Tabs Management</title>
  </head>
  <body>
    <Navbar />
    <!-- Render the Navbar component -->
    <div class="flex">
      <div class="flex-auto w-64">
        <!-- Render the Main Content component -->
        <BucketsList />
        <GlobalSearchResult />
      </div>
    </div>
    <div id="html-templates" hidden="true">
      <BucketGroupTemplate />
      <DefaultBucketTemplate />
      <ArchivedBucketTemplate />
      <TabItemTemplate />
      <BucketSearchResultTemplate />
    </div>
    <div id="html-dialogs">
      <RenameBucketDialog />
    </div>
  </body>

  <style is:global>
    @tailwind base;
    @tailwind components;
    @tailwind utilities;
  </style>

  <script>
    import { BucketEvents } from '../scripts/internal/bucket-signals';

    const opt_expand_all = document.getElementById('opt-expand-all');
    if (opt_expand_all) {
      opt_expand_all.addEventListener('click', async () => {
        // Buckets
        const buckets = document
          .getElementById('buckets-list')
          ?.getElementsByClassName('bt-bucket-group');

        if (!buckets) return;

        for (let bucket = 0; bucket < buckets.length; bucket++) {
          const element = buckets[bucket];
          element.getElementsByTagName('input')[0].checked = true;
        }

        // Archived Bucket
        const archivedBuckets = document
          .getElementById('buckets-list-archive')
          ?.getElementsByClassName('bt-bucket-group');

        if (!archivedBuckets) return;

        for (let bucket = 0; bucket < archivedBuckets.length; bucket++) {
          const element = archivedBuckets[bucket];
          element.getElementsByTagName('input')[0].checked = true;
        }
      });
    }

    const opt_collapse_all = document.getElementById('opt-collapse-all');
    if (opt_collapse_all) {
      opt_collapse_all.addEventListener('click', async () => {
        // Buckets
        const buckets = document
          .getElementById('buckets-list')
          ?.getElementsByClassName('bt-bucket-group');

        if (!buckets) return;

        for (let bucket = 0; bucket < buckets.length; bucket++) {
          const element = buckets[bucket];
          element.getElementsByTagName('input')[0].checked = false;
        }

        // Archived Bucket
        const archivedBuckets = document
          .getElementById('buckets-list-archive')
          ?.getElementsByClassName('bt-bucket-group');

        if (!archivedBuckets) return;

        for (let bucket = 0; bucket < archivedBuckets.length; bucket++) {
          const element = archivedBuckets[bucket];
          element.getElementsByTagName('input')[0].checked = false;
        }
      });
    }

    const opt_export_buckets = document.getElementById('opt-export-buckets');
    if (opt_export_buckets) {
      opt_export_buckets.addEventListener('click', async () => {
        window.globalBucketTabsState.BucketSignals.emit(
          BucketEvents.ExportBuckets
        );
      });
    }

    const opt_delete_buckets = document.getElementById('opt-delete-buckets');
    if (opt_delete_buckets) {
      opt_delete_buckets.addEventListener('click', async () => {
        window.globalBucketTabsState.BucketSignals.emit(
          BucketEvents.DeleteAllBuckets
        );
      });
    }

    const opt_add_bucket = document.getElementById('opt-add-bucket');
    if (opt_add_bucket) {
      opt_add_bucket.addEventListener('click', async () => {
        window.globalBucketTabsState.BucketSignals.emit(BucketEvents.AddBucket);
      });
    }
  </script>
</html>
